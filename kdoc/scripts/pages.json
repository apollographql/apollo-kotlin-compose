[{"name":"class Error<D : Executable.Data>(val exception: Exception) : ApolloResult<D> ","description":"com.apollographql.compose.ApolloResult.Error","location":"compose-support/com.apollographql.compose/-apollo-result/-error/index.html","searchKeys":["Error","class Error<D : Executable.Data>(val exception: Exception) : ApolloResult<D> ","com.apollographql.compose.ApolloResult.Error"]},{"name":"class Success<D : Executable.Data>(val data: D, val extensions: Map<String, Any?>) : ApolloResult<D> ","description":"com.apollographql.compose.ApolloResult.Success","location":"compose-support/com.apollographql.compose/-apollo-result/-success/index.html","searchKeys":["Success","class Success<D : Executable.Data>(val data: D, val extensions: Map<String, Any?>) : ApolloResult<D> ","com.apollographql.compose.ApolloResult.Success"]},{"name":"constructor(data: D, extensions: Map<String, Any?>)","description":"com.apollographql.compose.ApolloResult.Success.Success","location":"compose-support/com.apollographql.compose/-apollo-result/-success/-success.html","searchKeys":["Success","constructor(data: D, extensions: Map<String, Any?>)","com.apollographql.compose.ApolloResult.Success.Success"]},{"name":"constructor(exception: Exception)","description":"com.apollographql.compose.ApolloResult.Error.Error","location":"compose-support/com.apollographql.compose/-apollo-result/-error/-error.html","searchKeys":["Error","constructor(exception: Exception)","com.apollographql.compose.ApolloResult.Error.Error"]},{"name":"fun <D : Mutation.Data> useMutation(mutation: Mutation<D>): State<ApolloResult<D>?>","description":"com.apollographql.compose.useMutation","location":"compose-support/com.apollographql.compose/use-mutation.html","searchKeys":["useMutation","fun <D : Mutation.Data> useMutation(mutation: Mutation<D>): State<ApolloResult<D>?>","com.apollographql.compose.useMutation"]},{"name":"fun <D : Operation.Data> ApolloCall<D>.toState(context: CoroutineContext = EmptyCoroutineContext): State<ApolloResponse<D>?>","description":"com.apollographql.compose.toState","location":"compose-support/com.apollographql.compose/to-state.html","searchKeys":["toState","fun <D : Operation.Data> ApolloCall<D>.toState(context: CoroutineContext = EmptyCoroutineContext): State<ApolloResponse<D>?>","com.apollographql.compose.toState"]},{"name":"fun <D : Operation.Data> useOperation(operation: Operation<D>): State<ApolloResult<D>?>","description":"com.apollographql.compose.useOperation","location":"compose-support/com.apollographql.compose/use-operation.html","searchKeys":["useOperation","fun <D : Operation.Data> useOperation(operation: Operation<D>): State<ApolloResult<D>?>","com.apollographql.compose.useOperation"]},{"name":"fun <D : Query.Data> ApolloCall<D>.watchAsState(context: CoroutineContext = EmptyCoroutineContext): State<ApolloResponse<D>?>","description":"com.apollographql.compose.watchAsState","location":"compose-support/com.apollographql.compose/watch-as-state.html","searchKeys":["watchAsState","fun <D : Query.Data> ApolloCall<D>.watchAsState(context: CoroutineContext = EmptyCoroutineContext): State<ApolloResponse<D>?>","com.apollographql.compose.watchAsState"]},{"name":"fun <D : Query.Data> useQuery(query: Query<D>): State<ApolloResult<D>?>","description":"com.apollographql.compose.useQuery","location":"compose-support/com.apollographql.compose/use-query.html","searchKeys":["useQuery","fun <D : Query.Data> useQuery(query: Query<D>): State<ApolloResult<D>?>","com.apollographql.compose.useQuery"]},{"name":"fun <D : Subscription.Data> useSubscription(subscription: Subscription<D>): State<ApolloResult<D>?>","description":"com.apollographql.compose.useSubscription","location":"compose-support/com.apollographql.compose/use-subscription.html","searchKeys":["useSubscription","fun <D : Subscription.Data> useSubscription(subscription: Subscription<D>): State<ApolloResult<D>?>","com.apollographql.compose.useSubscription"]},{"name":"fun ApolloClientProvider(client: () -> ApolloClient, content: () -> Unit)","description":"com.apollographql.compose.ApolloClientProvider","location":"compose-support/com.apollographql.compose/-apollo-client-provider.html","searchKeys":["ApolloClientProvider","fun ApolloClientProvider(client: () -> ApolloClient, content: () -> Unit)","com.apollographql.compose.ApolloClientProvider"]},{"name":"sealed interface ApolloResult<D : Executable.Data>","description":"com.apollographql.compose.ApolloResult","location":"compose-support/com.apollographql.compose/-apollo-result/index.html","searchKeys":["ApolloResult","sealed interface ApolloResult<D : Executable.Data>","com.apollographql.compose.ApolloResult"]},{"name":"val VERSION: String","description":"com.apollographql.compose.VERSION","location":"compose-support/com.apollographql.compose/-v-e-r-s-i-o-n.html","searchKeys":["VERSION","val VERSION: String","com.apollographql.compose.VERSION"]},{"name":"val data: D","description":"com.apollographql.compose.ApolloResult.Success.data","location":"compose-support/com.apollographql.compose/-apollo-result/-success/data.html","searchKeys":["data","val data: D","com.apollographql.compose.ApolloResult.Success.data"]},{"name":"val exception: Exception","description":"com.apollographql.compose.ApolloResult.Error.exception","location":"compose-support/com.apollographql.compose/-apollo-result/-error/exception.html","searchKeys":["exception","val exception: Exception","com.apollographql.compose.ApolloResult.Error.exception"]},{"name":"val extensions: Map<String, Any?>","description":"com.apollographql.compose.ApolloResult.Success.extensions","location":"compose-support/com.apollographql.compose/-apollo-result/-success/extensions.html","searchKeys":["extensions","val extensions: Map<String, Any?>","com.apollographql.compose.ApolloResult.Success.extensions"]},{"name":"class ApolloPagingSource<Data : Operation.Data, Value : Any>(appendCall: suspend (response: ApolloResponse<Data>?, loadSize: Int) -> ApolloCall<Data>?, itemsAfter: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> LoadResult.Page.COUNT_UNDEFINED }, prependCall: suspend (response: ApolloResponse<Data>, loadSize: Int) -> ApolloCall<Data>?? = null, itemsBefore: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> LoadResult.Page.COUNT_UNDEFINED }, getItems: suspend (response: ApolloResponse<Data>) -> Result<List<Value>>) : PagingSource<ApolloCall<Data>, Value> ","description":"com.apollographql.compose.paging.ApolloPagingSource","location":"compose-paging-support/com.apollographql.compose.paging/-apollo-paging-source/index.html","searchKeys":["ApolloPagingSource","class ApolloPagingSource<Data : Operation.Data, Value : Any>(appendCall: suspend (response: ApolloResponse<Data>?, loadSize: Int) -> ApolloCall<Data>?, itemsAfter: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> LoadResult.Page.COUNT_UNDEFINED }, prependCall: suspend (response: ApolloResponse<Data>, loadSize: Int) -> ApolloCall<Data>?? = null, itemsBefore: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> LoadResult.Page.COUNT_UNDEFINED }, getItems: suspend (response: ApolloResponse<Data>) -> Result<List<Value>>) : PagingSource<ApolloCall<Data>, Value> ","com.apollographql.compose.paging.ApolloPagingSource"]},{"name":"constructor(appendCall: suspend (response: ApolloResponse<Data>?, loadSize: Int) -> ApolloCall<Data>?, itemsAfter: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> LoadResult.Page.COUNT_UNDEFINED }, prependCall: suspend (response: ApolloResponse<Data>, loadSize: Int) -> ApolloCall<Data>?? = null, itemsBefore: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> LoadResult.Page.COUNT_UNDEFINED }, getItems: suspend (response: ApolloResponse<Data>) -> Result<List<Value>>)","description":"com.apollographql.compose.paging.ApolloPagingSource.ApolloPagingSource","location":"compose-paging-support/com.apollographql.compose.paging/-apollo-paging-source/-apollo-paging-source.html","searchKeys":["ApolloPagingSource","constructor(appendCall: suspend (response: ApolloResponse<Data>?, loadSize: Int) -> ApolloCall<Data>?, itemsAfter: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> LoadResult.Page.COUNT_UNDEFINED }, prependCall: suspend (response: ApolloResponse<Data>, loadSize: Int) -> ApolloCall<Data>?? = null, itemsBefore: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> LoadResult.Page.COUNT_UNDEFINED }, getItems: suspend (response: ApolloResponse<Data>) -> Result<List<Value>>)","com.apollographql.compose.paging.ApolloPagingSource.ApolloPagingSource"]},{"name":"fun <Data : Operation.Data, Value : Any> Pager(config: PagingConfig, appendCall: suspend (response: ApolloResponse<Data>?, loadSize: Int) -> ApolloCall<Data>?, itemsAfter: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> PagingSource.LoadResult.Page.COUNT_UNDEFINED }, prependCall: suspend (response: ApolloResponse<Data>, loadSize: Int) -> ApolloCall<Data>?? = null, itemsBefore: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> PagingSource.LoadResult.Page.COUNT_UNDEFINED }, getItems: suspend (response: ApolloResponse<Data>) -> Result<List<Value>>): Pager<ApolloCall<Data>, Value>","description":"com.apollographql.compose.paging.Pager","location":"compose-paging-support/com.apollographql.compose.paging/-pager.html","searchKeys":["Pager","fun <Data : Operation.Data, Value : Any> Pager(config: PagingConfig, appendCall: suspend (response: ApolloResponse<Data>?, loadSize: Int) -> ApolloCall<Data>?, itemsAfter: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> PagingSource.LoadResult.Page.COUNT_UNDEFINED }, prependCall: suspend (response: ApolloResponse<Data>, loadSize: Int) -> ApolloCall<Data>?? = null, itemsBefore: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> PagingSource.LoadResult.Page.COUNT_UNDEFINED }, getItems: suspend (response: ApolloResponse<Data>) -> Result<List<Value>>): Pager<ApolloCall<Data>, Value>","com.apollographql.compose.paging.Pager"]},{"name":"fun <Data : Operation.Data, Value : Any> rememberAndCollectPager(config: PagingConfig, appendCall: suspend (response: ApolloResponse<Data>?, loadSize: Int) -> ApolloCall<Data>?, itemsAfter: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> PagingSource.LoadResult.Page.COUNT_UNDEFINED }, prependCall: suspend (response: ApolloResponse<Data>, loadSize: Int) -> ApolloCall<Data>?? = null, itemsBefore: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> PagingSource.LoadResult.Page.COUNT_UNDEFINED }, getItems: suspend (response: ApolloResponse<Data>) -> Result<List<Value>>): LazyPagingItems<Value>","description":"com.apollographql.compose.paging.rememberAndCollectPager","location":"compose-paging-support/com.apollographql.compose.paging/remember-and-collect-pager.html","searchKeys":["rememberAndCollectPager","fun <Data : Operation.Data, Value : Any> rememberAndCollectPager(config: PagingConfig, appendCall: suspend (response: ApolloResponse<Data>?, loadSize: Int) -> ApolloCall<Data>?, itemsAfter: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> PagingSource.LoadResult.Page.COUNT_UNDEFINED }, prependCall: suspend (response: ApolloResponse<Data>, loadSize: Int) -> ApolloCall<Data>?? = null, itemsBefore: suspend (response: ApolloResponse<Data>, loadedItemsCount: Int) -> Int = { _, _ -> PagingSource.LoadResult.Page.COUNT_UNDEFINED }, getItems: suspend (response: ApolloResponse<Data>) -> Result<List<Value>>): LazyPagingItems<Value>","com.apollographql.compose.paging.rememberAndCollectPager"]},{"name":"open override fun getRefreshKey(state: PagingState<ApolloCall<Data>, Value>): ApolloCall<Data>?","description":"com.apollographql.compose.paging.ApolloPagingSource.getRefreshKey","location":"compose-paging-support/com.apollographql.compose.paging/-apollo-paging-source/get-refresh-key.html","searchKeys":["getRefreshKey","open override fun getRefreshKey(state: PagingState<ApolloCall<Data>, Value>): ApolloCall<Data>?","com.apollographql.compose.paging.ApolloPagingSource.getRefreshKey"]},{"name":"open suspend override fun load(params: PagingSource.LoadParams<ApolloCall<Data>>): PagingSource.LoadResult<ApolloCall<Data>, Value>","description":"com.apollographql.compose.paging.ApolloPagingSource.load","location":"compose-paging-support/com.apollographql.compose.paging/-apollo-paging-source/load.html","searchKeys":["load","open suspend override fun load(params: PagingSource.LoadParams<ApolloCall<Data>>): PagingSource.LoadResult<ApolloCall<Data>, Value>","com.apollographql.compose.paging.ApolloPagingSource.load"]},{"name":"val VERSION: String","description":"com.apollographql.compose.paging.VERSION","location":"compose-paging-support/com.apollographql.compose.paging/-v-e-r-s-i-o-n.html","searchKeys":["VERSION","val VERSION: String","com.apollographql.compose.paging.VERSION"]}]